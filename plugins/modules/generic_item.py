#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# (c) 2020, 1Password & Agilebits (@1Password)


from __future__ import (absolute_import, division, print_function)

__metaclass__ = type

from ansible.module_utils.common.text.converters import to_native

DOCUMENTATION = '''
module: generic_item
author:
  - 1Password (@1Password)
requirements:
notes:
short_description: Creates a customizable 1Password Item
description:
  - Create or update an Item in a Vault.
  - Fully customizable using the Fields option
  - B(NOTE): When I(state=upsert) be aware that any Item fields without labels are removed during the update process.
options:
  name:
    type: str
    description:
      - Name of the Item. Displayed in the 1Password UI.
      - If C(state) is not C(created) and C(uuid) is defined, this value will overwrite previously-stored Item name.
  uuid:
    type: str
    description:
      - Unique ID for a single Item.
      - Cannot be defined if C(state) is C(created)
      - If C(state) is not  C(created), uses the UUID to retrieve Item attributes.
  category:
    type: str
    default: password
    choices:
      - login
      - password
      - server
      - database
      - software_license
      - secure_note
      - wireless_router
      - bank_account
      - email_account
  urls:
    type: list
    elements: string
    description:
      - Stores one or more URLs on an item
      - URLs are clickable in the 1Password UI
  favorite:
    type: bool
    default: false

  fields:
    description: List of fields associated with the Item
    suboptions:
      label:
        type: str
        required: true
        description: The name of the field
      value:
        type: str
        description:
            - Sets the value of the field.
            - If C(generate_value) is C(true), this attribute is ignored.
      overwrite:
        type: bool
        default: yes
        choices:
            - yes
            - no
        description:
            - Always replace the field's value when updating the Item.
            - Preserve the field value returned by 1Password if not undefined. 
            - B(NOTE): Only valid on fields with a non-empty C(label).
      section:
        type: str
        description:
          - Place field into a named group. If section does not exist, it is created.
          - If two or more fields belong to the same C(section), they are grouped together under that section.
      field_type:
        type: str
        default: string
        choices:
          - string
          - email
          - concealed
          - url
          - totp
          - date
          - month_year
      generate_value:
        type: bool
        default: False
        description:
          - When C(True), uses the C(generator_recipe) settings to generate a value on your behalf
          - Overrides C(value) if C(True).
      generator_recipe:
        type: dict
        description:
          - Configures 1Password's Secure Password Generator
          - If C(generate_value) is false, these options have no effect.
        suboptions:
          length:
            type: int
            default: 32
            description:
              - Defines number of characters in generated password
          include_digits:
            type: bool
            default: true
            description:
              - Toggle whether generated password includes digits (0-9)
          include_letters:
            type: bool
            default: true
            description:
              - Toggle whether generated password includes ASCII characters (a-zA-Z)
          include_symbols:
            type: bool
            default: true
            description:
              - Toggle whether generated password includes ASCII symbol characters

extends_documentation_fragment:
  - onepassword.connect.item_tags
  - onepassword.connect.item_state
  - onepassword.connect.api_params
'''

EXAMPLES = '''
- name: Create an Item with no fields
  onepassword.connect.generic_item:
    title: Example Item
    state: created

- name: Create Item with value generated by 1Password
  onepassword.connect.generic_item:
    title: Club Membership
    state: created
    fields:
      - label: Secret Code
        field_type: concealed
        generate_value: true
        generator_recipe:
            length: 16
            include_letters: yes
            include_digits: yes
            include_symbols: no
        section: Club Card Details
  register: op_item  # Access item values through `op_item['data']`
  no_log: true       # Hide the output - it will contain the secret value you just stored

- name: Update an item while preserving the field's value
  onepassword.connect.generic_item:
    title: Club Membership
    state: upserted
    fields:
      - label: Secret Code
        field_type: concealed
        overwrite: no   # copies the field's stored value
        generate_value: true
        generator_recipe:
            length: 16
            include_letters: yes
            include_digits: yes
            include_symbols: no
        section: Club Card Details
  no_log: true


- name: Delete an Item by its Item UUID
  onepassword.connect.generic_item:
    uuid: 3igj89sdf9ssdf89g
    state: deleted
  no_log: true

- name: Delete an Item by its name
  onepassword.connect.generic_item:
    title: Club Membership
    state: deleted
  no_log: true
'''

RETURN = '''
op_item:
  description: Dictionary containing Item properties or an empty dictionary if I(state=absent). See 1Password API specs for complete structure.
  type: complex
  returned: always
'''

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.onepassword.connect.plugins.module_utils import specs, api, vault, errors


def main():

    # Name always required when creating a new Item
    required_if = [["state", "created", ["name"]]]

    module = AnsibleModule(
        argument_spec=specs.op_item(),
        supports_check_mode=True,
        required_if=required_if
    )

    # Assert Item UUID not defined when creating new item
    # Server will create the Item UUID.
    if _id_defined_for_new_item(module.params):
        module.fail_json("Item UUID cannot be defined when state is `created`")
        return

    results = {"op_item": {}, "changed": False}

    changed = False
    api_response = {}
    try:
        api_client = api.create_client(module)
        state = module.params["state"].lower()

        if state == "created":
            changed, api_response = vault.create_item(module.params, api_client)
        elif state == "upserted":
            changed, api_response = vault.upsert_item(module.params, api_client)
        elif state == "absent":
            changed, api_response = vault.delete_item(module.params, api_client)
    except TypeError as e:
        results.update({"msg": to_native("Invalid Item config: {err}".format(err=e))})
        module.fail_json(**results)
    except errors.Error as e:
        results.update({"msg": to_native(e.message)})
        module.fail_json(**results)

    results.update({"op_item": api_response, "changed": changed})
    module.exit_json(**results)


def _id_defined_for_new_item(params):
    """Assert an Item UUID is not supplied when state = create
    :params dict: Module parameters
    """
    return params["state"].lower() == "created" and params.get("uuid")


if __name__ == '__main__':
    main()
